# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'fofac_test.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import sys

from PyQt5 import QtCore, QtGui, QtWidgets
import base64, os, requests
import json


class Ui_MainWindow(object):
    # 设置对象 布局
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(607, 222)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.lineEdit_fingerprint = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_fingerprint.setGeometry(QtCore.QRect(20, 40, 301, 31))
        self.lineEdit_fingerprint.setObjectName("lineEdit_fingerprint")

        self.pushButton_start = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_start.setGeometry(QtCore.QRect(480, 150, 111, 41))
        self.pushButton_start.setObjectName("pushButton_start")
        self.pushButton_start.clicked.connect(self.msg)

        self.lineEdit_resultfile = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_resultfile.setGeometry(QtCore.QRect(350, 40, 131, 31))
        self.lineEdit_resultfile.setObjectName("lineEdit_resultfile")

        self.lineEdit_ipnumber = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_ipnumber.setGeometry(QtCore.QRect(20, 100, 171, 31))
        self.lineEdit_ipnumber.setObjectName("lineEdit_ipnumber")

        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(20, 20, 54, 12))
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(350, 20, 71, 16))
        self.label_2.setObjectName("label_2")
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(20, 80, 161, 16))
        self.label_3.setObjectName("label_3")
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    # 描述
    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Fofac"))
        self.lineEdit_fingerprint.setToolTip(_translate("MainWindow", "<html><head/><body><p>输入Fofa指纹，如app=&quot;thinkphp&quot;</p></body></html>"))
        self.lineEdit_fingerprint.setWhatsThis(_translate("MainWindow", "<html><head/><body><p>输入Fofa指纹，如app=&quot;thinkphp&quot;</p></body></html>"))
        self.pushButton_start.setText(_translate("MainWindow", "下载数据"))
        self.label.setText(_translate("MainWindow", "Fofa指纹"))
        self.label_2.setText(_translate("MainWindow", "保存文件名"))
        self.label_3.setText(_translate("MainWindow", "获取IP数量【限制1w条】"))

    # 设置事件绑定的函数
    def msg(self):
        # print("test")
        size = self.lineEdit_ipnumber.text()
        search = self.lineEdit_fingerprint.text()
        output = self.lineEdit_resultfile.text()
        getFofa(size, search, output)


def getFofa(size, search, output):
    global result
    email = ''
    key = ''
    full = 'false'  # 搜索结果是否包含一年前的，fofa的默认搜索结果为一年内数据
    search = base64.b64encode(search.encode('utf-8')).decode('utf-8')
    url = "https://fofa.info/api/v1/search/all?email={}&key={}&qbase64={}&size={}&full={}&fields=protocol,ip,port".format(
        email, key, search,
        size, full)
    response = requests.get(url)
    res = json.loads(response.content.decode('utf-8'))
    print(res)

    # 存入列表
    url_list=[]
    for i in range(len(res["results"])):
        protocol = res["results"][i][0]
        ip = res["results"][i][1]
        port = res["results"][i][2]
        if protocol == "":
            url = 'http://{}'.format(ip + ":" + port)
        elif protocol == "http":
            url = 'http://{}'.format(ip + ":" + port)
        elif protocol == "https":
            url = 'https://{}'.format(ip + ":" + port)
        else:
            print("")
        url_list.append(url)

    # 通过转换集合去重并保存
    url_list = list(set(url_list))
    with open('{}'.format(output), 'a+') as w:
        for url in url_list:
            w.write('{}\n'.format(url))
    # print("File save as  {}\{}".format(os.getcwd(), output))

if __name__ == '__main__':
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()  # 创建窗体对象
    ui = Ui_MainWindow()  # 创建PyQt设计的窗体对象
    ui.setupUi(MainWindow)  # 调用PyQt窗体的方法对窗体对象进行初始化设置
    MainWindow.show()  # 显示窗体
    sys.exit(app.exec_())  # 程序关闭时退出进程
